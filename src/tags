!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANALYSE_H	analyse.h	8;"	d
ARRAY	scan.h	/^	ARRAY, BEGIN, CHAR, CONST, DO, DOWNTO, ELSE, END,$/;"	e	enum:__anon4
ASSIGN	scan.h	/^	NEQ, COMMA, SEMI, ASSIGN, LPAR, RPAR, LBRA, RBRA,$/;"	e	enum:__anon4
Add_Addop_t	parse.h	/^	Nop_Addop_t, Add_Addop_t, Minus_Addop_t $/;"	e	enum:__anon6
Addop_t	parse.h	/^} Addop_t;$/;"	t	typeref:enum:__anon6
ArgListB	parse.c	/^ArgListSP ArgListB(void)$/;"	f
ArgListS	parse.h	/^} ArgListS;$/;"	t	typeref:struct:_ArgListS
ArgListSP	parse.h	/^typedef struct _ArgListS *ArgListSP;$/;"	t	typeref:struct:_ArgListS
ArgListV	analyse.c	/^void ArgListV(ArgListSP t)$/;"	f
Arr_Sym_t	symtab.h	/^	Arr_Sym_t, Para_Sym_t$/;"	e	enum:__anon3
Array_Assgin_t	parse.h	/^	Norm_Assgin_t, Fun_Assgin_t, Array_Assgin_t $/;"	e	enum:__anon12
Array_Factor_t	parse.h	/^	Id_Factor_t, Array_Factor_t, Unsign_Factor_t,$/;"	e	enum:__anon14
Assgin_Stmt_t	parse.h	/^	Assgin_Stmt_t, IF_Stmt_t, Repeat_Stmt_t,$/;"	e	enum:__anon11
Assgin_t	parse.h	/^} Assgin_t;$/;"	t	typeref:enum:__anon12
AssignStmtB	parse.c	/^AssignStmtSP AssignStmtB(void)$/;"	f
AssignStmtS	parse.h	/^} AssignStmtS;$/;"	t	typeref:struct:_AssignStmtS
AssignStmtSP	parse.h	/^typedef struct _AssignStmtS *AssignStmtSP;$/;"	t	typeref:struct:_AssignStmtS
AssignStmtV	analyse.c	/^void AssignStmtV(AssignStmtSP t)$/;"	f
BEGIN	scan.h	/^	ARRAY, BEGIN, CHAR, CONST, DO, DOWNTO, ELSE, END,$/;"	e	enum:__anon4
BOOL	global.h	/^typedef int BOOL;$/;"	t
BUFLEN	scan.c	23;"	d	file:
BlockB	parse.c	/^BlockSP BlockB(void)$/;"	f
BlockS	parse.h	/^} BlockS;$/;"	t	typeref:struct:_BlockS
BlockSP	parse.h	/^typedef struct _BlockS *BlockSP;$/;"	t	typeref:struct:_BlockS
BlockV	analyse.c	/^void BlockV(BlockSP t)$/;"	f
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g$/;"	m
CH	scan.h	/^	ID, CH, UNS, STRING,$/;"	e	enum:__anon4
CHAR	scan.h	/^	ARRAY, BEGIN, CHAR, CONST, DO, DOWNTO, ELSE, END,$/;"	e	enum:__anon4
COLON	scan.h	/^	LBBR, RBBR, SQUO, DQUO, COLON, DOT$/;"	e	enum:__anon4
COMMA	scan.h	/^	NEQ, COMMA, SEMI, ASSIGN, LPAR, RPAR, LBRA, RBRA,$/;"	e	enum:__anon4
CONST	scan.h	/^	ARRAY, BEGIN, CHAR, CONST, DO, DOWNTO, ELSE, END,$/;"	e	enum:__anon4
CharArr_Var_Ident_t	parse.h	/^	IntArr_Var_Ident_t, CharArr_Var_Ident_t,$/;"	e	enum:__anon9
Char_Const_Ident_t	parse.h	/^	Int_Const_Ident_t, Char_Const_Ident_t,$/;"	e	enum:__anon9
Char_Funret_t	parse.h	/^	Int_Funret_t, Char_Funret_t $/;"	e	enum:__anon10
Char_Para_Ref_Ident_t	parse.h	/^	Int_Para_Ref_Ident_t, Char_Para_Ref_Ident_t$/;"	e	enum:__anon9
Char_Para_Val_Ident_t	parse.h	/^	Int_Para_Val_Ident_t, Char_Para_Val_Ident_t,$/;"	e	enum:__anon9
Char_Var_Ident_t	parse.h	/^	Int_Var_Ident_t, Char_Var_Ident_t,$/;"	e	enum:__anon9
CompStmtB	parse.c	/^CompStmtSP CompStmtB(void)$/;"	f
CompStmtS	parse.h	/^} CompStmtS;$/;"	t	typeref:struct:_CompStmtS
CompStmtSP	parse.h	/^typedef struct _CompStmtS *CompStmtSP;$/;"	t	typeref:struct:_CompStmtS
CompStmtV	analyse.c	/^void CompStmtV(CompStmtSP t)$/;"	f
Comp_Stmt_t	parse.h	/^	Pcall_Stmt_t, Comp_Stmt_t, Read_Stmt_t,$/;"	e	enum:__anon11
CondB	parse.c	/^CondSP CondB(void)$/;"	f
CondS	parse.h	/^} CondS;$/;"	t	typeref:struct:_CondS
CondSP	parse.h	/^typedef struct _CondS *CondSP;$/;"	t	typeref:struct:_CondS
CondV	analyse.c	/^void CondV(CondSP t)$/;"	f
ConstDecB	parse.c	/^ConstDecSP ConstDecB(void)$/;"	f
ConstDecS	parse.h	/^} ConstDecS;$/;"	t	typeref:struct:_ConstDecS
ConstDecSP	parse.h	/^typedef struct _ConstDecS *ConstDecSP;$/;"	t	typeref:struct:_ConstDecS
ConstDecV	analyse.c	/^void ConstDecV(ConstDecSP t)$/;"	f
ConstDefB	parse.c	/^ConstDefSP ConstDefB(void)$/;"	f
ConstDefS	parse.h	/^} ConstDefS;$/;"	t	typeref:struct:_ConstDefS
ConstDefSP	parse.h	/^typedef struct _ConstDefS *ConstDefSP;$/;"	t	typeref:struct:_ConstDefS
ConstDefV	analyse.c	/^void ConstDefV(ConstDefSP t)$/;"	f
DO	scan.h	/^	ARRAY, BEGIN, CHAR, CONST, DO, DOWNTO, ELSE, END,$/;"	e	enum:__anon4
DONE	scan.c	/^	DONE$/;"	e	enum:__anon1	file:
DOT	scan.h	/^	LBBR, RBBR, SQUO, DQUO, COLON, DOT$/;"	e	enum:__anon4
DOWNTO	scan.h	/^	ARRAY, BEGIN, CHAR, CONST, DO, DOWNTO, ELSE, END,$/;"	e	enum:__anon4
DQUO	scan.h	/^	LBBR, RBBR, SQUO, DQUO, COLON, DOT$/;"	e	enum:__anon4
Div_Multop_t	parse.h	/^	Nop_Multop_t, Mult_Multop_t, Div_Multop_t $/;"	e	enum:__anon7
Downto_For_t	parse.h	/^	To_For_t, Downto_For_t $/;"	e	enum:__anon13
ELSE	scan.h	/^	ARRAY, BEGIN, CHAR, CONST, DO, DOWNTO, ELSE, END,$/;"	e	enum:__anon4
END	scan.h	/^	ARRAY, BEGIN, CHAR, CONST, DO, DOWNTO, ELSE, END,$/;"	e	enum:__anon4
ENDFILE	scan.h	/^	ENDFILE, ERROR,$/;"	e	enum:__anon4
EOF_flag	scan.c	/^static BOOL EOF_flag = FALSE; \/\/ for ungetchar behavior$/;"	v	file:
EQU	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
ERRCHARLEN	error.h	15;"	d
ERRCHARTYPE	error.h	16;"	d
ERRNO	error.h	/^typedef int ERRNO;$/;"	t
ERROR	scan.h	/^	ENDFILE, ERROR,$/;"	e	enum:__anon4
ERROR_H	error.h	8;"	d
ERRSTRINGTYPE	error.h	17;"	d
ERRVEC	error.c	/^char *ERRVEC[MAXERROR] = $/;"	v
Equ_Rela_t	parse.h	/^	Equ_Rela_t, Neq_Rela_t, Gtt_Rela_t, $/;"	e	enum:__anon8
ExprB	parse.c	/^ExprSP ExprB(void)$/;"	f
ExprS	parse.h	/^} ExprS;$/;"	t	typeref:struct:_ExprS
ExprSP	parse.h	/^typedef struct _ExprS *ExprSP;$/;"	t	typeref:struct:_ExprS
ExprV	analyse.c	/^void ExprV(ExprSP t)$/;"	f
Expr_Factor_t	parse.h	/^	Expr_Factor_t, Funcall_Factor_t $/;"	e	enum:__anon14
FALSE	global.h	18;"	d
FOR	scan.h	/^	FOR, FUNCTION, IF, INTEGER, OF, PROCEDURE, READ,$/;"	e	enum:__anon4
FUNCTION	scan.h	/^	FOR, FUNCTION, IF, INTEGER, OF, PROCEDURE, READ,$/;"	e	enum:__anon4
FactorB	parse.c	/^FactorSP FactorB(void)$/;"	f
FactorS	parse.h	/^} FactorS;$/;"	t	typeref:struct:_FactorS
FactorSP	parse.h	/^typedef struct _FactorS *FactorSP;$/;"	t	typeref:struct:_FactorS
FactorV	analyse.c	/^void FactorV(FactorSP t)$/;"	f
Factor_t	parse.h	/^} Factor_t;$/;"	t	typeref:enum:__anon14
FcallStmtB	parse.c	/^FcallStmtSP FcallStmtB(void)$/;"	f
FcallStmtS	parse.h	/^} FcallStmtS;$/;"	t	typeref:struct:_FcallStmtS
FcallStmtSP	parse.h	/^typedef struct _FcallStmtS *FcallStmtSP;$/;"	t	typeref:struct:_FcallStmtS
FcallStmtV	analyse.c	/^void FcallStmtV(FcallStmtSP t)$/;"	f
ForStmtB	parse.c	/^ForStmtSP ForStmtB(void)$/;"	f
ForStmtS	parse.h	/^} ForStmtS;$/;"	t	typeref:struct:_ForStmtS
ForStmtSP	parse.h	/^typedef struct _ForStmtS *ForStmtSP;$/;"	t	typeref:struct:_ForStmtS
ForStmtV	analyse.c	/^void ForStmtV(ForStmtSP t)$/;"	f
For_Stmt_t	parse.h	/^	Write_Stmt_t,  For_Stmt_t, $/;"	e	enum:__anon11
For_t	parse.h	/^} For_t;$/;"	t	typeref:enum:__anon13
FunDecB	parse.c	/^FunDecSP FunDecB(void)$/;"	f
FunDecS	parse.h	/^} FunDecS;$/;"	t	typeref:struct:_FunDecS
FunDecSP	parse.h	/^typedef struct _FunDecS *FunDecSP;$/;"	t	typeref:struct:_FunDecS
FunDecV	analyse.c	/^void FunDecV(FunDecSP t)$/;"	f
FunDefB	parse.c	/^FunDefSP FunDefB(void)$/;"	f
FunDefS	parse.h	/^} FunDefS;$/;"	t	typeref:struct:_FunDefS
FunDefSP	parse.h	/^typedef struct _FunDefS *FunDefSP;$/;"	t	typeref:struct:_FunDefS
FunDefV	analyse.c	/^void FunDefV(FunDefSP t)$/;"	f
FunHeadB	parse.c	/^FunHeadSP FunHeadB(void)$/;"	f
FunHeadS	parse.h	/^} FunHeadS;$/;"	t	typeref:struct:_FunHeadS
FunHeadSP	parse.h	/^typedef struct _FunHeadS *FunHeadSP;$/;"	t	typeref:struct:_FunHeadS
FunHeadV	analyse.c	/^void FunHeadV(FunHeadSP t)$/;"	f
Fun_Assgin_t	parse.h	/^	Norm_Assgin_t, Fun_Assgin_t, Array_Assgin_t $/;"	e	enum:__anon12
Fun_Ident_t	parse.h	/^	Init_Ident_t, Proc_Ident_t, Fun_Ident_t, $/;"	e	enum:__anon9
Fun_PFDec_t	parse.h	/^	Fun_PFDec_t , Proc_PFDec_t $/;"	e	enum:__anon5
Fun_Sym_t	symtab.h	/^	Var_Sym_t, Fun_Sym_t, Proc_Sym_t,$/;"	e	enum:__anon3
Funcall_Factor_t	parse.h	/^	Expr_Factor_t, Funcall_Factor_t $/;"	e	enum:__anon14
GEQ	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
GLOBAL_H	global.h	9;"	d
GTT	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
Geq_Rela_t	parse.h	/^	Geq_Rela_t, Lst_Rela_t, Leq_Rela_t $/;"	e	enum:__anon8
Gtt_Rela_t	parse.h	/^	Equ_Rela_t, Neq_Rela_t, Gtt_Rela_t, $/;"	e	enum:__anon8
ID	scan.h	/^	ID, CH, UNS, STRING,$/;"	e	enum:__anon4
IDREADMODE	parse.h	/^typedef int IDREADMODE; $/;"	t
IF	scan.h	/^	FOR, FUNCTION, IF, INTEGER, OF, PROCEDURE, READ,$/;"	e	enum:__anon4
IF_Stmt_t	parse.h	/^	Assgin_Stmt_t, IF_Stmt_t, Repeat_Stmt_t,$/;"	e	enum:__anon11
INCHA	scan.c	/^	INLES, INCOM, INGRE, INCHA,$/;"	e	enum:__anon1	file:
INCOM	scan.c	/^	INLES, INCOM, INGRE, INCHA,$/;"	e	enum:__anon1	file:
INGRE	scan.c	/^	INLES, INCOM, INGRE, INCHA,$/;"	e	enum:__anon1	file:
INIDE	scan.c	/^	START, INSTR, INUNS, INIDE,$/;"	e	enum:__anon1	file:
INLES	scan.c	/^	INLES, INCOM, INGRE, INCHA,$/;"	e	enum:__anon1	file:
INSTR	scan.c	/^	START, INSTR, INUNS, INIDE,$/;"	e	enum:__anon1	file:
INTEGER	scan.h	/^	FOR, FUNCTION, IF, INTEGER, OF, PROCEDURE, READ,$/;"	e	enum:__anon4
INUNS	scan.c	/^	START, INSTR, INUNS, INIDE,$/;"	e	enum:__anon1	file:
Id_Factor_t	parse.h	/^	Id_Factor_t, Array_Factor_t, Unsign_Factor_t,$/;"	e	enum:__anon14
Id_Write_t	parse.h	/^	StrId_Write_t, Str_Write_t, Id_Write_t $/;"	e	enum:__anon15
IdentB	parse.c	/^IdentSP IdentB(IDREADMODE mode)$/;"	f
IdentS	parse.h	/^} IdentS;$/;"	t	typeref:struct:_IdentS
IdentSP	parse.h	/^typedef struct _IdentS *IdentSP;$/;"	t	typeref:struct:_IdentS
IdentV	analyse.c	/^void IdentV(IdentSP t)$/;"	f
Ident_t	parse.h	/^} Ident_t;$/;"	t	typeref:enum:__anon9
IfStmtB	parse.c	/^IfStmtSP IfStmtB(void)$/;"	f
IfStmtS	parse.h	/^} IfStmtS;$/;"	t	typeref:struct:_IfStmtS
IfStmtSP	parse.h	/^typedef struct _IfStmtS *IfStmtSP;$/;"	t	typeref:struct:_IfStmtS
IfStmtV	analyse.c	/^void IfStmtV(IfStmtSP t)$/;"	f
Indent	util.c	/^void Indent(void)$/;"	f
Init_Ident_t	parse.h	/^	Init_Ident_t, Proc_Ident_t, Fun_Ident_t, $/;"	e	enum:__anon9
IntArr_Var_Ident_t	parse.h	/^	IntArr_Var_Ident_t, CharArr_Var_Ident_t,$/;"	e	enum:__anon9
Int_Const_Ident_t	parse.h	/^	Int_Const_Ident_t, Char_Const_Ident_t,$/;"	e	enum:__anon9
Int_Funret_t	parse.h	/^	Int_Funret_t, Char_Funret_t $/;"	e	enum:__anon10
Int_Para_Ref_Ident_t	parse.h	/^	Int_Para_Ref_Ident_t, Char_Para_Ref_Ident_t$/;"	e	enum:__anon9
Int_Para_Val_Ident_t	parse.h	/^	Int_Para_Val_Ident_t, Char_Para_Val_Ident_t,$/;"	e	enum:__anon9
Int_Var_Ident_t	parse.h	/^	Int_Var_Ident_t, Char_Var_Ident_t,$/;"	e	enum:__anon9
LBBR	scan.h	/^	LBBR, RBBR, SQUO, DQUO, COLON, DOT$/;"	e	enum:__anon4
LBRA	scan.h	/^	NEQ, COMMA, SEMI, ASSIGN, LPAR, RPAR, LBRA, RBRA,$/;"	e	enum:__anon4
LEQ	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
LPAR	scan.h	/^	NEQ, COMMA, SEMI, ASSIGN, LPAR, RPAR, LBRA, RBRA,$/;"	e	enum:__anon4
LST	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
Leq_Rela_t	parse.h	/^	Geq_Rela_t, Lst_Rela_t, Leq_Rela_t $/;"	e	enum:__anon8
Lst_Rela_t	parse.h	/^	Geq_Rela_t, Lst_Rela_t, Leq_Rela_t $/;"	e	enum:__anon8
MALLOC	parse.h	262;"	d
MAXERROR	error.h	10;"	d
MAXREFFENCE	symtab.h	10;"	d
MAXRESERVED	global.h	29;"	d
MAXTOKENSIZE	scan.h	27;"	d
MINUS	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
MISSDOT	error.h	18;"	d
Minus_Addop_t	parse.h	/^	Nop_Addop_t, Add_Addop_t, Minus_Addop_t $/;"	e	enum:__anon6
Mult_Multop_t	parse.h	/^	Nop_Multop_t, Mult_Multop_t, Div_Multop_t $/;"	e	enum:__anon7
Multop_t	parse.h	/^} Multop_t;$/;"	t	typeref:enum:__anon7
NEQ	scan.h	/^	NEQ, COMMA, SEMI, ASSIGN, LPAR, RPAR, LBRA, RBRA,$/;"	e	enum:__anon4
Neq_Rela_t	parse.h	/^	Equ_Rela_t, Neq_Rela_t, Gtt_Rela_t, $/;"	e	enum:__anon8
Nop_Addop_t	parse.h	/^	Nop_Addop_t, Add_Addop_t, Minus_Addop_t $/;"	e	enum:__anon6
Nop_Multop_t	parse.h	/^	Nop_Multop_t, Mult_Multop_t, Div_Multop_t $/;"	e	enum:__anon7
Norm_Assgin_t	parse.h	/^	Norm_Assgin_t, Fun_Assgin_t, Array_Assgin_t $/;"	e	enum:__anon12
Null_Stmt_t	parse.h	/^	Null_Stmt_t $/;"	e	enum:__anon11
OBJS	Makefile	/^OBJS = main.o util.o scan.o error.o parse.o analyse.o$/;"	m
OF	scan.h	/^	FOR, FUNCTION, IF, INTEGER, OF, PROCEDURE, READ,$/;"	e	enum:__anon4
ONE	test/2.pas	/^	function ONE(var a1,b1:integer):char;$/;"	f
OVER	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
PARSE_H	parse.h	8;"	d
PFDecListB	parse.c	/^PFDecListSP PFDecListB(void)$/;"	f
PFDecListS	parse.h	/^} PFDecListS;$/;"	t	typeref:struct:_PFDecListS
PFDecListSP	parse.h	/^typedef struct _PFDecListS *PFDecListSP;$/;"	t	typeref:struct:_PFDecListS
PFDecListV	analyse.c	/^void PFDecListV(PFDecListSP t)$/;"	f
PFDec_t	parse.h	/^} PFDec_t;$/;"	t	typeref:enum:__anon5
PLUS	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
PROCEDURE	scan.h	/^	FOR, FUNCTION, IF, INTEGER, OF, PROCEDURE, READ,$/;"	e	enum:__anon4
ParaDefB	parse.c	/^ParaDefSP ParaDefB(void)$/;"	f
ParaDefS	parse.h	/^} ParaDefS;$/;"	t	typeref:struct:_ParaDefS
ParaDefSP	parse.h	/^typedef struct _ParaDefS *ParaDefSP;$/;"	t	typeref:struct:_ParaDefS
ParaDefV	analyse.c	/^void ParaDefV(ParaDefSP t)$/;"	f
ParaListB	parse.c	/^ParaListSP ParaListB(void)$/;"	f
ParaListS	parse.h	/^} ParaListS;$/;"	t	typeref:struct:_ParaListS
ParaListSP	parse.h	/^typedef struct _ParaListS *ParaListSP;$/;"	t	typeref:struct:_ParaListS
ParaListV	analyse.c	/^void ParaListV(ParaListSP t)$/;"	f
Para_Sym_t	symtab.h	/^	Arr_Sym_t, Para_Sym_t$/;"	e	enum:__anon3
PcallStmtB	parse.c	/^PcallStmtSP PcallStmtB(void)$/;"	f
PcallStmtS	parse.h	/^} PcallStmtS;$/;"	t	typeref:struct:_PcallStmtS
PcallStmtSP	parse.h	/^typedef struct _PcallStmtS *PcallStmtSP;$/;"	t	typeref:struct:_PcallStmtS
PcallStmtV	analyse.c	/^void PcallStmtV(PcallStmtSP t)$/;"	f
Pcall_Stmt_t	parse.h	/^	Pcall_Stmt_t, Comp_Stmt_t, Read_Stmt_t,$/;"	e	enum:__anon11
PgmB	parse.c	/^PgmSP PgmB(void)$/;"	f
PgmS	parse.h	/^} PgmS;$/;"	t	typeref:struct:_PgmS
PgmSP	parse.h	/^typedef struct _PgmS *PgmSP;$/;"	t	typeref:struct:_PgmS
PgmV	analyse.c	/^void PgmV(PgmSP t)$/;"	f
PrintSource	main.c	/^BOOL PrintSource = TRUE;$/;"	v
ProcDecB	parse.c	/^ProcDecSP ProcDecB(void)$/;"	f
ProcDecS	parse.h	/^} ProcDecS;$/;"	t	typeref:struct:_ProcDecS
ProcDecSP	parse.h	/^typedef struct _ProcDecS *ProcDecSP;$/;"	t	typeref:struct:_ProcDecS
ProcDecV	analyse.c	/^void ProcDecV(ProcDecSP t)$/;"	f
ProcDefB	parse.c	/^ProcDefSP ProcDefB(void)$/;"	f
ProcDefS	parse.h	/^} ProcDefS;$/;"	t	typeref:struct:_ProcDefS
ProcDefSP	parse.h	/^typedef struct _ProcDefS *ProcDefSP;$/;"	t	typeref:struct:_ProcDefS
ProcDefV	analyse.c	/^void ProcDefV(ProcDefSP t)$/;"	f
ProcHeadB	parse.c	/^ProcHeadSP ProcHeadB(void)$/;"	f
ProcHeadS	parse.h	/^} ProcHeadS;$/;"	t	typeref:struct:_ProcHeadS
ProcHeadSP	parse.h	/^typedef struct _ProcHeadS *ProcHeadSP;$/;"	t	typeref:struct:_ProcHeadS
ProcHeadV	analyse.c	/^void ProcHeadV(ProcHeadSP t)$/;"	f
Proc_Ident_t	parse.h	/^	Init_Ident_t, Proc_Ident_t, Fun_Ident_t, $/;"	e	enum:__anon9
Proc_PFDec_t	parse.h	/^	Fun_PFDec_t , Proc_PFDec_t $/;"	e	enum:__anon5
Proc_Sym_t	symtab.h	/^	Var_Sym_t, Fun_Sym_t, Proc_Sym_t,$/;"	e	enum:__anon3
RBBR	scan.h	/^	LBBR, RBBR, SQUO, DQUO, COLON, DOT$/;"	e	enum:__anon4
RBRA	scan.h	/^	NEQ, COMMA, SEMI, ASSIGN, LPAR, RPAR, LBRA, RBRA,$/;"	e	enum:__anon4
READ	scan.h	/^	FOR, FUNCTION, IF, INTEGER, OF, PROCEDURE, READ,$/;"	e	enum:__anon4
READCURR	parse.h	257;"	d
READPREV	parse.h	258;"	d
REPEAT	scan.h	/^	REPEAT, THEN, TO, UNTIL, VAR, WRITE,$/;"	e	enum:__anon4
RPAR	scan.h	/^	NEQ, COMMA, SEMI, ASSIGN, LPAR, RPAR, LBRA, RBRA,$/;"	e	enum:__anon4
ReadStmtB	parse.c	/^ReadStmtSP ReadStmtB(void)$/;"	f
ReadStmtS	parse.h	/^} ReadStmtS;$/;"	t	typeref:struct:_ReadStmtS
ReadStmtSP	parse.h	/^typedef struct _ReadStmtS *ReadStmtSP;$/;"	t	typeref:struct:_ReadStmtS
ReadStmtV	analyse.c	/^void ReadStmtV(ReadStmtSP t)$/;"	f
Read_Stmt_t	parse.h	/^	Pcall_Stmt_t, Comp_Stmt_t, Read_Stmt_t,$/;"	e	enum:__anon11
Rela_t	parse.h	/^} Rela_t;$/;"	t	typeref:enum:__anon8
RepeStmtB	parse.c	/^RepeStmtSP RepeStmtB(void)$/;"	f
RepeStmtS	parse.h	/^} RepeStmtS;$/;"	t	typeref:struct:_RepeStmtS
RepeStmtSP	parse.h	/^typedef struct _RepeStmtS *RepeStmtSP;$/;"	t	typeref:struct:_RepeStmtS
RepeStmtV	analyse.c	/^void RepeStmtV(RepeStmtSP t)$/;"	f
Repeat_Stmt_t	parse.h	/^	Assgin_Stmt_t, IF_Stmt_t, Repeat_Stmt_t,$/;"	e	enum:__anon11
Return_t	parse.h	/^} Return_t;$/;"	t	typeref:enum:__anon10
SCAN_H	scan.h	9;"	d
SEMI	scan.h	/^	NEQ, COMMA, SEMI, ASSIGN, LPAR, RPAR, LBRA, RBRA,$/;"	e	enum:__anon4
SQUO	scan.h	/^	LBBR, RBBR, SQUO, DQUO, COLON, DOT$/;"	e	enum:__anon4
STAR	scan.h	/^	PLUS, MINUS, STAR, OVER, EQU, LST, LEQ, GTT, GEQ,$/;"	e	enum:__anon4
START	scan.c	/^	START, INSTR, INUNS, INIDE,$/;"	e	enum:__anon1	file:
STRING	scan.h	/^	ID, CH, UNS, STRING,$/;"	e	enum:__anon4
SYMTAB_H	symtab.h	8;"	d
ShowAST	main.c	/^BOOL ShowAST = TRUE;$/;"	v
StateType	scan.c	/^} StateType;$/;"	t	typeref:enum:__anon1	file:
StmtB	parse.c	/^StmtSP StmtB(void)$/;"	f
StmtS	parse.h	/^} StmtS;$/;"	t	typeref:struct:_StmtS
StmtSP	parse.h	/^typedef struct _StmtS *StmtSP;$/;"	t	typeref:struct:_StmtS
StmtV	analyse.c	/^void StmtV(StmtSP t)$/;"	f
Stmt_t	parse.h	/^} Stmt_t;$/;"	t	typeref:enum:__anon11
StrId_Write_t	parse.h	/^	StrId_Write_t, Str_Write_t, Id_Write_t $/;"	e	enum:__anon15
Str_Write_t	parse.h	/^	StrId_Write_t, Str_Write_t, Id_Write_t $/;"	e	enum:__anon15
SymType	symtab.h	/^} SymType;$/;"	t	typeref:enum:__anon3
SymtabES	symtab.h	/^} SymtabES;$/;"	t	typeref:struct:_SymtabES
TEST	parse.h	271;"	d
TEST2	parse.h	272;"	d
TEST3	parse.h	273;"	d
TEST4	parse.h	274;"	d
TEST5	parse.h	275;"	d
TEST6	parse.h	276;"	d
THEN	scan.h	/^	REPEAT, THEN, TO, UNTIL, VAR, WRITE,$/;"	e	enum:__anon4
TO	scan.h	/^	REPEAT, THEN, TO, UNTIL, VAR, WRITE,$/;"	e	enum:__anon4
TRUE	global.h	22;"	d
TWO	test/2.pas	/^		procedure TWO(a2:char);$/;"	p
TermB	parse.c	/^TermSP TermB(void)$/;"	f
TermS	parse.h	/^} TermS;$/;"	t	typeref:struct:_TermS
TermSP	parse.h	/^typedef struct _TermS *TermSP;$/;"	t	typeref:struct:_TermS
TermV	analyse.c	/^void TermV(TermSP t)$/;"	f
To_For_t	parse.h	/^	To_For_t, Downto_For_t $/;"	e	enum:__anon13
TokenType	scan.h	/^} TokenType;$/;"	t	typeref:enum:__anon4
TraceScan	main.c	/^BOOL TraceScan = FALSE;$/;"	v
UNS	scan.h	/^	ID, CH, UNS, STRING,$/;"	e	enum:__anon4
UNTIL	scan.h	/^	REPEAT, THEN, TO, UNTIL, VAR, WRITE,$/;"	e	enum:__anon4
UTIL_H	util.h	9;"	d
Unsign_Factor_t	parse.h	/^	Id_Factor_t, Array_Factor_t, Unsign_Factor_t,$/;"	e	enum:__anon14
VAR	scan.h	/^	REPEAT, THEN, TO, UNTIL, VAR, WRITE,$/;"	e	enum:__anon4
VarDecB	parse.c	/^VarDecSP VarDecB(void)$/;"	f
VarDecS	parse.h	/^} VarDecS;$/;"	t	typeref:struct:_VarDecS
VarDecSP	parse.h	/^typedef struct _VarDecS *VarDecSP;$/;"	t	typeref:struct:_VarDecS
VarDecV	analyse.c	/^void VarDecV(VarDecSP t)$/;"	f
VarDefB	parse.c	/^VarDefSP VarDefB(void)$/;"	f
VarDefS	parse.h	/^} VarDefS;$/;"	t	typeref:struct:_VarDefS
VarDefSP	parse.h	/^typedef struct _VarDefS *VarDefSP;$/;"	t	typeref:struct:_VarDefS
VarDefV	analyse.c	/^void VarDefV(VarDefSP t)$/;"	f
Var_Sym_t	symtab.h	/^	Var_Sym_t, Fun_Sym_t, Proc_Sym_t,$/;"	e	enum:__anon3
WRITE	scan.h	/^	REPEAT, THEN, TO, UNTIL, VAR, WRITE,$/;"	e	enum:__anon4
WriteStmtB	parse.c	/^WriteStmtSP WriteStmtB(void)$/;"	f
WriteStmtS	parse.h	/^} WriteStmtS;$/;"	t	typeref:struct:_WriteStmtS
WriteStmtSP	parse.h	/^typedef struct _WriteStmtS *WriteStmtSP;$/;"	t	typeref:struct:_WriteStmtS
WriteStmtV	analyse.c	/^void WriteStmtV(WriteStmtSP t)$/;"	f
Write_Stmt_t	parse.h	/^	Write_Stmt_t,  For_Stmt_t, $/;"	e	enum:__anon11
Write_t	parse.h	/^} Write_t;$/;"	t	typeref:enum:__anon15
ZERO	test/2.pas	/^procedure ZERO(var a1,b1:integer);$/;"	p
_ArgListS	parse.h	/^typedef struct _ArgListS {$/;"	s
_AssignStmtS	parse.h	/^typedef struct _AssignStmtS {$/;"	s
_BlockS	parse.h	/^typedef struct _BlockS {$/;"	s
_CompStmtS	parse.h	/^typedef struct _CompStmtS {$/;"	s
_CondS	parse.h	/^typedef struct _CondS {$/;"	s
_ConstDecS	parse.h	/^typedef struct _ConstDecS {$/;"	s
_ConstDefS	parse.h	/^typedef struct _ConstDefS {$/;"	s
_ExprS	parse.h	/^typedef struct _ExprS {$/;"	s
_FactorS	parse.h	/^typedef struct _FactorS {$/;"	s
_FcallStmtS	parse.h	/^typedef struct _FcallStmtS {$/;"	s
_ForStmtS	parse.h	/^typedef struct _ForStmtS {$/;"	s
_FunDecS	parse.h	/^typedef struct _FunDecS {$/;"	s
_FunDefS	parse.h	/^typedef struct _FunDefS {$/;"	s
_FunHeadS	parse.h	/^typedef struct _FunHeadS {$/;"	s
_IdentS	parse.h	/^typedef struct _IdentS {$/;"	s
_IfStmtS	parse.h	/^typedef struct _IfStmtS {$/;"	s
_PFDecListS	parse.h	/^typedef struct _PFDecListS {$/;"	s
_ParaDefS	parse.h	/^typedef struct _ParaDefS {$/;"	s
_ParaListS	parse.h	/^typedef struct _ParaListS {$/;"	s
_PcallStmtS	parse.h	/^typedef struct _PcallStmtS {$/;"	s
_PgmS	parse.h	/^typedef struct _PgmS {$/;"	s
_ProcDecS	parse.h	/^typedef struct _ProcDecS {$/;"	s
_ProcDefS	parse.h	/^typedef struct _ProcDefS {$/;"	s
_ProcHeadS	parse.h	/^typedef struct _ProcHeadS {$/;"	s
_ReadStmtS	parse.h	/^typedef struct _ReadStmtS {$/;"	s
_RepeStmtS	parse.h	/^typedef struct _RepeStmtS {$/;"	s
_StmtS	parse.h	/^typedef struct _StmtS {$/;"	s
_SymtabES	symtab.h	/^typedef struct _SymtabES {$/;"	s
_TermS	parse.h	/^typedef struct _TermS {$/;"	s
_VarDecS	parse.h	/^typedef struct _VarDecS {$/;"	s
_VarDefS	parse.h	/^typedef struct _VarDefS {$/;"	s
_WriteStmtS	parse.h	/^typedef struct _WriteStmtS {$/;"	s
add	test/1.pas	/^function add(var x, y: integer):char;$/;"	f
addr	symtab.h	/^	int addr;$/;"	m	struct:_SymtabES
alp	parse.h	/^	ArgListSP alp;$/;"	m	struct:_FcallStmtS
alp	parse.h	/^	ArgListSP alp;$/;"	m	struct:_PcallStmtS
analyse	analyse.c	/^void analyse(PgmSP t)$/;"	f
asp	parse.h	/^	AssignStmtSP asp;$/;"	m	struct:_StmtS
bp	parse.h	/^	BlockSP bp;$/;"	m	struct:_FunDefS
bp	parse.h	/^	BlockSP bp;$/;"	m	struct:_PgmS
bp	parse.h	/^	BlockSP bp;$/;"	m	struct:_ProcDefS
bufsize	scan.c	/^static int bufsize = 0;      \/\/ current size of buffered string$/;"	v	file:
cdp	parse.h	/^	ConstDecSP cdp;$/;"	m	struct:_BlockS
cdp	parse.h	/^	ConstDefSP cdp;$/;"	m	struct:_ConstDecS
char_to_long	scan.c	/^BOOL char_to_long = FALSE;$/;"	v
copyString	util.c	/^char *copyString(char *s)$/;"	f
cp	parse.h	/^	CondSP cp;$/;"	m	struct:_IfStmtS
cp	parse.h	/^	CondSP cp;$/;"	m	struct:_RepeStmtS
cpp	parse.h	/^	CompStmtSP cpp;$/;"	m	struct:_StmtS
csp	parse.h	/^	CompStmtSP csp;$/;"	m	struct:_BlockS
decline	symtab.h	/^	int decline;$/;"	m	struct:_SymtabES
ep	parse.h	/^	ExprSP ep;$/;"	m	struct:_ArgListS
ep	parse.h	/^	ExprSP ep;$/;"	m	struct:_FactorS
ep	parse.h	/^	ExprSP ep;$/;"	m	struct:_WriteStmtS
ep	parse.h	/^	StmtSP ep;$/;"	m	struct:_IfStmtS
errlist	main.c	/^FILE *errlist;$/;"	v
fcsp	parse.h	/^	FcallStmtSP fcsp;$/;"	m	struct:_FactorS
fdp	parse.h	/^	FunDecSP fdp; $/;"	m	struct:_PFDecListS
fdp	parse.h	/^	FunDefSP fdp;$/;"	m	struct:_FunDecS
fhp	parse.h	/^	FunHeadSP fhp;$/;"	m	struct:_FunDefS
fp	parse.h	/^	FactorSP fp;$/;"	m	struct:_TermS
frp	parse.h	/^	ForStmtSP frp;$/;"	m	struct:_StmtS
getNextChar	scan.c	/^static int getNextChar(BOOL flag)$/;"	f	file:
getToken	scan.c	/^TokenType getToken(void)$/;"	f
getsym	parse.c	/^static inline void getsym(void)$/;"	f	file:
headPr	util.c	/^void headPr(char *cont)$/;"	f
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_AssignStmtS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_ConstDefS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_FactorS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_FcallStmtS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_ForStmtS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_FunHeadS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_ParaDefS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_PcallStmtS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_ProcHeadS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_ReadStmtS
idp	parse.h	/^	IdentSP idp;$/;"	m	struct:_VarDefS
ifp	parse.h	/^	IfStmtSP ifp;$/;"	m	struct:_StmtS
indentno	util.c	/^static int indentno = 0;$/;"	v	file:
init	test/3.pas	/^procedure init();$/;"	p
innerIdnPr	util.c	/^void innerIdnPr(int n, ...)$/;"	f
innerIdnlnPr	util.c	/^void innerIdnlnPr(int n, ...)$/;"	f
innerIntPr	util.c	/^void innerIntPr(int val)$/;"	f
innerPr	util.c	/^void innerPr(int n, ...)$/;"	f
innerlnPr	util.c	/^void innerlnPr(int n, ...)$/;"	f
length	parse.h	/^	int length;$/;"	m	struct:_IdentS
lep	parse.h	/^	ExprSP lep;$/;"	m	struct:_AssignStmtS
lep	parse.h	/^	ExprSP lep;$/;"	m	struct:_CondS
lep	parse.h	/^	ExprSP lep;$/;"	m	struct:_ForStmtS
lexError	error.c	/^void lexError(ERRNO errno)$/;"	f
line	parse.h	/^	int line;$/;"	m	struct:_IdentS
lineBuf	scan.c	/^static char lineBuf[BUFLEN]; \/\/ hold the current line$/;"	v	file:
lineno	main.c	/^int lineno = 0;$/;"	v
linepos	scan.c	/^static int linepos = 0;      \/\/ current position in lineBuf$/;"	v	file:
listing	main.c	/^FILE *listing;$/;"	v
main	main.c	/^int main(int argc, const char *argv[])$/;"	f
match	parse.c	/^static inline BOOL match(TokenType expected)$/;"	f	file:
name	parse.h	/^	char *name;$/;"	m	struct:_IdentS
name	symtab.h	/^	char *name;$/;"	m	struct:_SymtabES
next	parse.h	/^	ArgListSP next;$/;"	m	struct:_ArgListS
next	parse.h	/^	CompStmtSP next;$/;"	m	struct:_CompStmtS
next	parse.h	/^	ConstDecSP next;$/;"	m	struct:_ConstDecS
next	parse.h	/^	ExprSP next;$/;"	m	struct:_ExprS
next	parse.h	/^	FunDecSP next;$/;"	m	struct:_FunDecS
next	parse.h	/^	PFDecListSP next;$/;"	m	struct:_PFDecListS
next	parse.h	/^	ParaDefSP next;$/;"	m	struct:_ParaDefS
next	parse.h	/^	ParaListSP next;$/;"	m	struct:_ParaListS
next	parse.h	/^	ProcDecSP next;$/;"	m	struct:_ProcDecS
next	parse.h	/^	ReadStmtSP next;$/;"	m	struct:_ReadStmtS
next	parse.h	/^	TermSP next;$/;"	m	struct:_TermS
next	parse.h	/^	VarDecSP next;$/;"	m	struct:_VarDecS
next	parse.h	/^	VarDefSP next;$/;"	m	struct:_VarDefS
op	parse.h	/^	Addop_t op;$/;"	m	struct:_ExprS
op	parse.h	/^	Multop_t op;$/;"	m	struct:_TermS
op	parse.h	/^	Rela_t op;$/;"	m	struct:_CondS
parse	parse.c	/^PgmSP parse(void)$/;"	f
pcp	parse.h	/^	PcallStmtSP pcp;$/;"	m	struct:_StmtS
pdp	parse.h	/^	ParaDefSP pdp;$/;"	m	struct:_ParaListS
pdp	parse.h	/^	ProcDecSP pdp; $/;"	m	struct:_PFDecListS
pdp	parse.h	/^	ProcDefSP pdp;$/;"	m	struct:_ProcDecS
pfdlp	parse.h	/^	PFDecListSP pfdlp;$/;"	m	struct:_BlockS
php	parse.h	/^	ProcHeadSP php;$/;"	m	struct:_ProcDefS
plp	parse.h	/^	ParaListSP plp;$/;"	m	struct:_FunHeadS
plp	parse.h	/^	ParaListSP plp;$/;"	m	struct:_ProcHeadS
prevToken	parse.c	/^static TokenType prevToken;$/;"	v	file:
prevTokenString	parse.c	/^static char prevTokenString[MAXTOKENSIZE + 1];$/;"	v	file:
printToken	util.c	/^void printToken(TokenType token, const char *tokenString)$/;"	f
proc	test/1.pas	/^procedure proc();$/;"	p
rdp	parse.h	/^	ReadStmtSP rdp;$/;"	m	struct:_StmtS
refline	symtab.h	/^	int refline[MAXREFFENCE];$/;"	m	struct:_SymtabES
rep	parse.h	/^	ExprSP rep;$/;"	m	struct:_AssignStmtS
rep	parse.h	/^	ExprSP rep;$/;"	m	struct:_CondS
rep	parse.h	/^	ExprSP rep;$/;"	m	struct:_ForStmtS
reservedLookup	scan.c	/^static TokenType reservedLookup(char *s)$/;"	f	file:
reservedWords	scan.c	/^} reservedWords[MAXRESERVED] = $/;"	v	typeref:struct:__anon2	file:
rpp	parse.h	/^	RepeStmtSP rpp;$/;"	m	struct:_StmtS
source	main.c	/^FILE *source;$/;"	v
sp	parse.h	/^	StmtSP sp;$/;"	m	struct:_CompStmtS
sp	parse.h	/^	StmtSP sp;$/;"	m	struct:_ForStmtS
sp	parse.h	/^	StmtSP sp;$/;"	m	struct:_RepeStmtS
sp	parse.h	/^	char *sp;$/;"	m	struct:_WriteStmtS
str	scan.c	/^	char *str;$/;"	m	struct:__anon2	file:
syntaxError	error.c	/^void syntaxError(ERRNO errno)$/;"	f
tailPr	util.c	/^void tailPr(char *cont)$/;"	f
tiplist	main.c	/^FILE *tiplist;$/;"	v
tok	scan.c	/^	TokenType tok;$/;"	m	struct:__anon2	file:
token	parse.c	/^static TokenType token; \/* hold current token*\/$/;"	v	file:
tokenCount	util.c	/^int tokenCount = 0;$/;"	v
tokenString	scan.c	/^char tokenString[MAXTOKENSIZE + 1];$/;"	v
tp	parse.h	/^	StmtSP tp;$/;"	m	struct:_IfStmtS
tp	parse.h	/^	TermSP tp;$/;"	m	struct:_ExprS
type	parse.h	/^	Assgin_t type;$/;"	m	struct:_AssignStmtS
type	parse.h	/^	Factor_t type;$/;"	m	struct:_FactorS
type	parse.h	/^	For_t type;$/;"	m	struct:_ForStmtS
type	parse.h	/^	Ident_t type;$/;"	m	struct:_IdentS
type	parse.h	/^	PFDec_t type;$/;"	m	struct:_PFDecListS
type	parse.h	/^	Return_t type;$/;"	m	struct:_FunHeadS
type	parse.h	/^	Stmt_t type;$/;"	m	struct:_StmtS
type	parse.h	/^	Write_t type;$/;"	m	struct:_WriteStmtS
type	symtab.h	/^	SymType type;$/;"	m	struct:_SymtabES
ungetNextChar	scan.c	/^static void ungetNextChar(void)$/;"	f	file:
usi	parse.h	/^	int usi;$/;"	m	struct:_FactorS
val	parse.h	/^	int val;$/;"	m	struct:_IdentS
vdp	parse.h	/^	VarDecSP vdp;$/;"	m	struct:_BlockS
vdp	parse.h	/^	VarDefSP vdp;$/;"	m	struct:_VarDecS
wtp	parse.h	/^	WriteStmtSP wtp;$/;"	m	struct:_StmtS
